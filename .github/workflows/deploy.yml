name: deploy
on:
  push:
    branches:
      - 'master'


jobs:
  binary:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]

    steps:
      - name: Checkout github repo (+ download lfs dependencies)
        uses: actions/checkout@v1
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm install
        working-directory: webapp
      - name: Build
        run: bash ./build-front.sh
        working-directory: scripts
        env:
          NODE_OPTIONS: --max-old-space-size=8192
      - name: Copy build to app resources
        run: cp -r webapp/build resources/webapp
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydantic --no-binary pydantic
          pip install -r requirements-dev.txt
      - name: Generate binary Unix
        if: matrix.os != 'windows-latest'
        run: |
          git log -1 HEAD --format=%H > ./resources/commit_id
          pyinstaller -F antarest/main.py -n server --additional-hooks-dir extra-hooks --add-data resources:resources
          dist/server -v
      - name: Generate binary Windows
        if: matrix.os == 'windows-latest'
        run: |
          git log -1 HEAD --format=%H > .\resources\commit_id
          pyinstaller -F antarest\main.py -n server --additional-hooks-dir extra-hooks --add-data ".\resources;.\resources"
          dist\server.exe -v
      - name: Archive server binary
        uses: actions/upload-artifact@v2
        with:
          name: server-${{ matrix.os }}
          path: dist/server*
