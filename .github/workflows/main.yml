name: main
on:
  push:
    branches:
      - "**"

jobs:
  python-lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout github repo (+ download lfs dependencies)
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - uses: isort/isort-action@master
        with:
          sort-paths: antarest, tests
          requirementsFiles: "requirements-dev.txt"
      - name: Check with black
        uses: psf/black@stable
        with:
          # Version of Black should match the versions set in `requirements-dev.txt`
          version: "~=23.7.0"
          options: --check --diff
      - name: Check Typing (mypy)
        #continue-on-error: true
        run: |
          mypy --install-types --non-interactive

  python-test:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 9
      matrix:
        os: [windows-latest, ubuntu-20.04]

    steps:
      - name: Checkout github repo (+ download lfs dependencies)
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Test with pytest
        run: |
          pytest --cov antarest --cov-report xml
      - name: Fix code coverage paths
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sed -i 's/\/home\/runner\/work\/AntaREST\/AntaREST/\/github\/workspace/g' coverage.xml
      - name: Archive code coverage results
        if: matrix.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v3
        with:
          name: python-code-coverage-report
          path: coverage.xml

  npm-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Checkout github repo
        uses: actions/checkout@v3
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 18.16.1
      - name: Install dependencies
        run: npm install
        working-directory: webapp
      - name: Build
        run: npm run build
        working-directory: webapp
        env:
          NODE_OPTIONS: --max-old-space-size=8192
          DISABLE_ESLINT_PLUGIN: true
      - name: Lint
        run: npm run lint
        working-directory: webapp

  sonarcloud:
    runs-on: ubuntu-20.04
    needs: [python-test, npm-test]
    steps:
      - uses: actions/checkout@v3
      - name: Download python coverage report
        uses: actions/download-artifact@v3
        with:
          name: python-code-coverage-report
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  auto-merge-or-squash:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Merge Method
        id: merge-method
        run: |
          base_branch="dev" 
          git fetch origin $base_branch  

          commit_count=$(git rev-list --count HEAD ^origin/$base_branch)
          echo "Commit Count: $commit_count"

          if [ "$commit_count" -eq "1" ]; then
            echo "::set-output name=METHOD::squash"
          else
            echo "::set-output name=METHOD::merge"
          fi

      - name: Apply Merge Method
        run: |
          echo "Merge Method: ${{ steps.merge-method.outputs.METHOD }}"
          gh pr merge ${{ github.event.pull_request.number }} --merge-method ${{ steps.merge-method.outputs.METHOD }} --repo $GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
