"""update_datetime

Revision ID: dcbe7dbf500b
Revises: 63ed81e5ce6f
Create Date: 2021-11-17 16:10:35.914371

"""
from alembic import op
from dateutil import tz
from sqlalchemy.engine import Connection
from sqlalchemy import text
from datetime import timezone, datetime

# revision identifiers, used by Alembic.
revision = 'dcbe7dbf500b'
down_revision = '9846e90c2868'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connexion: Connection = op.get_bind()
    def Hey() -> None:
        def convertToUTC(table: str, completion_type: bool = False) -> None:
                results = connexion.execute(
                    f"SELECT id, creation_date, completion_date FROM {table}" if completion_type else f"SELECT id, created_at, updated_at FROM {table}")
                for row in results:
                    row_id = row['id']

                    dt_1 = datetime.strptime(row['creation_date' if completion_type else 'created_at'], '%Y-%m-%d %H:%M:%S.%f')
                    dt_1 = dt_1.replace(tzinfo=timezone.utc)
                    d1 = dt_1.timestamp()

                    dt_2 = datetime.strptime(row['completion_date' if completion_type else 'updated_at'], '%Y-%m-%d %H:%M:%S.%f')
                    dt_2 = dt_2.replace(tzinfo=timezone.utc)
                    d2 = dt_2.timestamp()

                    if completion_type:
                        connexion.execute(text(
                            f"UPDATE {table} SET creation_date= :creation_date, completion_date= :completion_date WHERE id='{row_id}'"),
                                          creation_date=str(d1), completion_date=str(d2))
                    else:
                        connexion.execute(text(
                            f"UPDATE {table} SET created_at= :created_at, updated_at= :updated_at WHERE id='{row_id}'"),
                            created_at=str(d1), updated_at=str(d2))

        # DATASET
        convertToUTC('dataset')

        # JOB RESULTS
        convertToUTC('job_result', True)

        # STUDIES
        convertToUTC('study')

        # TASKJOBS
        convertToUTC('taskjob', True)

        # VARIANT STUDY SNAPSHOT
        results = connexion.execute(
            "SELECT id, created_at FROM variant_study_snapshot")
        for row in results:
            row_id = row['id']
            dt_1 = datetime.strptime(row['created_at'], '%Y-%m-%d %H:%M:%S.%f')
            dt = dt_1.replace(tzinfo=timezone.utc).timestamp()
            connexion.execute(text(f"UPDATE variant_study_snapshot SET created_at= :created_at WHERE id='{row_id}'"), created_at=dt)



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connexion: Connection = op.get_bind()

    def Hey() -> None:
        def convertToLocal(table: str, completion_type: bool = False) -> None:
                to_zone = tz.gettz()
                results = connexion.execute(
                    f"SELECT id, creation_date, completion_date FROM {table}" if completion_type else f"SELECT id, created_at, updated_at FROM {table}")
                for row in results:
                    row_id = row['id']

                    dt_1 = datetime.utcfromtimestamp(float(row['creation_date' if completion_type else 'created_at']))
                    dt_1 = dt_1.replace(tzinfo=to_zone)
                    d1 = dt_1.strftime('%Y-%m-%d %H:%M:%S.%f')

                    dt_2 = datetime.utcfromtimestamp(float(row['completion_date' if completion_type else 'updated_at']))
                    dt_2 = dt_2.replace(tzinfo=to_zone)
                    d2 = dt_2.strftime('%Y-%m-%d %H:%M:%S.%f')

                    if completion_type:
                        connexion.execute(text(
                            f"UPDATE {table} SET creation_date= :creation_date, completion_date= :completion_date WHERE id='{row_id}'"),
                                          creation_date=d1, completion_date=d2)
                    else:
                        connexion.execute(text(
                            f"UPDATE {table} SET created_at= :created_at, updated_at= :updated_at WHERE id='{row_id}'"),
                            created_at=d1, updated_at=d2)

        # DATASET
        convertToLocal('dataset')

        # JOB RESULTS
        convertToLocal('job_result', True)

        # STUDIES
        convertToLocal('study')

        # TASKJOBS
        convertToLocal('taskjob', True)

        # VARIANT STUDY SNAPSHOT
        to_zone = tz.gettz()
        results = connexion.execute(
            "SELECT id, created_at FROM variant_study_snapshot")
        for row in results:
            row_id = row['id']
            dt_1 = datetime.utcfromtimestamp(float(row['created_at']))
            dt_1 = dt_1.replace(tzinfo=to_zone)
            dt = dt_1.strftime('%Y-%m-%d %H:%M:%S.%f')
            connexion.execute(text(f"UPDATE variant_study_snapshot SET created_at= :created_at WHERE id='{row_id}'"), created_at=dt)
