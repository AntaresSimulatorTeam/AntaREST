"""fix_bot_foreign_key

Revision ID: 9846e90c2868
Revises: 63ed81e5ce6f
Create Date: 2021-11-19 11:58:11.378519

"""
from sqlite3 import Connection

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
from sqlalchemy import text

from antarest.login.model import Bot, User

revision = '9846e90c2868'
down_revision = '63ed81e5ce6f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if op.get_context().dialect.name != 'sqlite':
        with op.batch_alter_table('bots', schema=None) as batch_op:
            batch_op.drop_constraint("bots_owner_fkey", type_='foreignkey')
            batch_op.create_foreign_key("bots_owner_fkey", 'identities', ['owner'], ['id'])
    else:
        connexion: Connection = op.get_bind()
        bots_result = connexion.execute("SELECT * FROM bots")
        bots = [b for b in bots_result]
        op.drop_table('bots')
        op.create_table('bots',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('owner', sa.Integer(), nullable=True),
            sa.Column('is_author', sa.Boolean(), nullable=True),
            sa.ForeignKeyConstraint(['id'], ['identities.id'], ),
            sa.ForeignKeyConstraint(['owner'], ['identities.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
        for bot in bots:
            connexion.execute(text(f"INSERT INTO 'bots' VALUES (:id, :owner, :is_author)"), id=bot[0], owner=bot[1], is_author=bot[2])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # NOOP
    # Don't want to revert back, anyway, the change is backward compatible

    # ### end Alembic commands ###
    pass
