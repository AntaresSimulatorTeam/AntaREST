/**
 * Copyright (c) 2024, RTE (https://www.rte-france.com)
 *
 * See AUTHORS.txt
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * SPDX-License-Identifier: MPL-2.0
 *
 * This file is part of the Antares project.
 */

import {
  BaseGridColumn,
  EditableGridCell,
  Item,
} from "@glideapps/glide-data-grid";
import { Aggregate, Column, Operation, TimeFrequency } from "./constants";

// Derived types
export type ColumnType = (typeof Column)[keyof typeof Column];
export type OperationType = (typeof Operation)[keyof typeof Operation];
export type AggregateType = (typeof Aggregate)[keyof typeof Aggregate];
export type TimeFrequencyType =
  (typeof TimeFrequency)[keyof typeof TimeFrequency];

export type DateIncrementFunction = (date: Date, amount: number) => Date;
export type FormatFunction = (date: Date, firstWeekSize: number) => string;

// !NOTE: This is temporary, date/time array should be generated by the API
export interface DateTimeMetadataDTO {
  start_date: string;
  steps: number;
  first_week_size: number;
  level: TimeFrequencyType;
}

export interface TimeSeriesColumnOptions {
  count: number;
  startIndex?: number;
  prefix?: string;
  width?: number;
  editable?: boolean;
  style?: BaseGridColumn["style"];
}

export interface CustomColumnOptions {
  titles: string[] | readonly string[];
  width?: number;
}

export interface DataColumnsConfig {
  timeSeriesColumns: boolean;
  width?: number;
  count: number;
  customColumns?: string[] | readonly string[];
}

export interface FormatGridNumberOptions {
  value?: number;
  maxDecimals?: number;
}

export interface EnhancedGridColumn extends BaseGridColumn {
  id: string;
  title: string;
  width?: number;
  type: ColumnType;
  editable: boolean;
}

export type ResultColumn = Omit<EnhancedGridColumn, "title"> & {
  title: string[];
};

export interface ResultColumnsOptions {
  titles: string[][];
  width?: number;
}

export type AggregateConfig = AggregateType[] | boolean | "stats" | "all";

export interface MatrixAggregates {
  min: number[];
  max: number[];
  avg: number[];
  total: number[];
}

// Represents data coming from the API
export interface MatrixDataDTO {
  data: number[][];
  columns: number[];
  index: number[];
}

export interface ResultMatrixDTO {
  data: number[][];
  columns: string[][];
  index: string[];
}

export type Coordinates = [number, number];

// Shape of updates provided by Glide Data Grid
export interface GridUpdate {
  coordinates: Item; // The cell being updated
  value: EditableGridCell;
}

// Shape of updates to be sent to the API
export interface MatrixUpdate {
  operation: OperationType;
  value: number;
}

// Shape of multiple updates to be sent to the API
export interface MatrixUpdateDTO {
  coordinates: number[][]; // Array of [col, row] pairs
  operation: MatrixUpdate;
}
