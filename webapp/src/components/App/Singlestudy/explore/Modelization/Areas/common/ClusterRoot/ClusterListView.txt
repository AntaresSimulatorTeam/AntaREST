import {
  Box,
  Collapse,
  IconButton,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  ListSubheader,
} from "@mui/material";
import { Fragment } from "react";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import DeleteIcon from "@mui/icons-material/Delete";
import ArrowForwardRoundedIcon from "@mui/icons-material/ArrowForwardRounded";
import { Cluster } from "../../../../../../../../common/types";
import AddClusterDialog from "./AddClusterDialog";
import { ClusterElement, Clusters } from "./utils";

interface Props {
  clusterList: Clusters;
  isAddClusterDialogOpen: boolean;
  onToggleGroupOpen: (groupName: string) => void;
  onClusterClick: (cluster: Cluster["id"]) => void;
  onClusterDeletion: (id: Cluster["id"]) => void;
}

export default function ClusterListView() {
  return (
    <Box sx={{ width: "100%", height: "100%" }}>
      <List
        sx={{
          width: "100%",
        }}
        component="nav"
        aria-labelledby="nested-list-subheader"
        subheader={
          <ListSubheader
            component="div"
            id="nested-list-subheader"
            sx={{
              color: "white",
              bgcolor: "#0000",
              fontSize: "18px",
            }}
          >
            {t("study.modelization.clusters.byGroups")}
          </ListSubheader>
        }
      >
        {Object.keys(clusterList).map((group) => {
          const clusterItems = clusterList[group];
          const { items, isOpen } = clusterItems;
          return (
            <Fragment key={group}>
              <ListItemButton
                onClick={() => handleToggleGroupOpen(group)}
                sx={{
                  width: "100%",
                  mb: 1,
                }}
              >
                <ListItemIcon>
                  <ArrowForwardRoundedIcon color="primary" />
                </ListItemIcon>
                <ListItemText
                  primary={group}
                  sx={{
                    color: "white",
                    fontWeight: "bold",
                    borderRadius: "4px",
                  }}
                />
                {isOpen ? (
                  <ExpandLessIcon color="primary" />
                ) : (
                  <ExpandMoreIcon color="primary" />
                )}
              </ListItemButton>
              {items.map((item: ClusterElement) => (
                <Collapse
                  key={item.id}
                  in={isOpen}
                  timeout="auto"
                  unmountOnExit
                >
                  <List component="div" disablePadding>
                    <ListItemButton
                      sx={{ pl: 4 }}
                      onClick={() => onClusterClick(item.id)}
                    >
                      <ListItemText primary={item.name} />
                      <IconButton
                        edge="end"
                        onClick={() => handleClusterDeletion(item.id)}
                      >
                        <DeleteIcon />
                      </IconButton>
                    </ListItemButton>
                  </List>
                </Collapse>
              ))}
            </Fragment>
          );
        })}
      </List>
      {isAddClusterDialogOpen && (
        <AddClusterDialog
          open={isAddClusterDialogOpen}
          title={t("study.modelization.clusters.newCluster")}
          clusterGroupList={clusterGroupList}
          clusterData={clusterData}
          studyId={study.id}
          area={currentArea}
          onCancel={() => setIsAddClusterDialogOpen(false)}
        />
      )}
    </Box>
  );
}
